<?phpclass TagHelper extends AppHelper {	public $name = 'Tag';	public $helpers = array(		'Html', 		'Form', 	);		public function form($model, $options = array()) {		$options['form'] = true;		return $this->input($model, $options);	}		public function input($model, $options = array()) {		$options = array_merge(array(			'form' => false,			'name' => 'new_tags',		), $options);		extract($options);		$out = '';		if (empty($tags) && $this->Html->value('Tag')) {			$tags = array();			if (!empty($this->request->data['Tag']['Tag'])) {				$tags = $this->request->data['Tag']['Tag'];			} else {				foreach ($this->request->data['Tag'] as $k => $tag) {					$tags[$tag['id']] = $tag['tag'];				}			}		}		if (!empty($form)) {			$out .= $this->Form->create($model, array('action' => 'edit'));		}		if (!empty($id)) {			$out .= $this->Form->hidden('id', array('value' => $id));		}		$out .= $this->Html->tag('h3', 'Tags');		if (!empty($tags)) {			if (isset($tags[0]['id'])) {				$newTags = array();				foreach ($tags as $tag) {					$newTags[$tag['id']] = $tag['tag'];				}				$tags = $newTags;			}			$out .= $this->Form->input('Tag', array(				'hiddenField' => false,				'options' => $tags,				'multiple' => 'checkbox', 				'label' => false, 				'value' => array_keys($tags),	//selected				'div' => 'tags-list',			));		}		$options = array(			'type' => 'text', 			'label' => 'Separate tags with commas',			'placeholder' => '(ie: youth, service, food bank)',		);		if (!empty($class)) {			$options = $this->Html->addClass($options, $class);		}		if (!empty($form)) {			$options = $this->Html->addClass($options, 'input-append', 'div');			$options['after'] = $this->Form->submit('Add Tags', array('div' => false));		}		$out .= $this->Form->input($name, $options);		if (!empty($form)) {			$out .= $this->Form->end();		}				return $this->Html->div('tags-input', $out);	}		public function tag($text, $options = array()) {		$options = array_merge(array(			'tag' => 'span',			'x' => null,			'url' => null,		), $options);		extract($options);		$out = $text;		if ($url) {			$out = $this->Html->link($out, $this->__getTagUrl($text, $url));		}		if ($x) {			$out .= $this->__getXUrl($x);		}		return $this->Html->tag($tag, $out, array('class' => 'tag'));	}		public function tagList($tags = null, $options = array()) {		if (empty($tags)) {			return '';		}		$out = '';		foreach ($tags as $tag) {			if (isset($tag['tag'])) {				$tag = $tag['tag'];			}			$out .= $this->Html->tag('li', $this->tag($tag, $options));		}		return $this->Html->tag('ul', $out, array('class' => 'tags-list'));	}		public function cloud($tagCount, $options = array()) {		if (empty($tagCount)) {			return false;		}		$minFontSize = 10;		$maxFontSize = 36;		$fontUnit = 'px';		$min = min($tagCount);		$max = max($tagCount);		$passTag = !empty($this->request->named['tag']) ? $this->request->named['tag'] . ',' : '';				$out = '';		foreach ($tagCount as $tag => $count) {			if ($max == $min || $count == $min) {				$fontSize = $minFontSize;			} else {				$fontSize = ((($maxFontSize - $minFontSize) * ($count - $min)) / ($max - $min)) + $minFontSize;			}			$out .= $this->Html->link($tag, array('tag' => $passTag . $tag), array(				'class' => 'tag',				'style' => 'font-size:' . $fontSize . $fontUnit,				'title' => 'Found ' . $count . ' Tagged as "' . $tag . '"',			));		}		return $this->Html->div('tags-cloud', $out);	}			private function __getTagUrl($tag, $url = true) {		if ($url === true) {			$url = $this->__currentUrl();		}		$slug = Inflector::slug($tag);		if (is_array($url)) {			$url['tag'] = $slug;		} else {			$url .= '/tag:' . $slug;		}		return $url;	}		private function __getXUrl($url = array()) {		if (!$url) {			return '';		}				if ($url === true || $url == 'remove') {			$url = array('tag' => false) + $this->__currentUrl();					}		return $this->Html->link('&times;', $url, array('escape' => false));	}		private function __currentUrl() {		$url = Router::parse($this->request->url);		if (!empty($url['pass'])) {			$url['?'] = $url['pass'];			unset($url['pass']);		}		if (!empty($url['named'])) {			$url = $url['named'] + $url;			unset($url['named']);		}				return $url;	}}